module Update exposing (..)

import Connectors exposing (..)
import ConnectorsEventHandling exposing (..)
import NodeEventHandling exposing (..)
import MapNode exposing (..)
import MapModel exposing (..)
import MapMsg exposing (..)
import UpdateHelpers exposing (..)
import ModelEventHandling exposing (..)

update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
  ( updateHelp msg model, Cmd.none )

updateHelp : Msg -> Model -> Model
updateHelp msg model =
  let
    upPDCon = updatePDConnector model.connectorData
    upPDNode = updatePDNode model.nodeData in
  case msg of
    DoNothing -> model
<<<<<<< HEAD
    DragAt d -> 
      dragNode model (calculatePosition model d)
    DragEnd _ -> 
      dragEnd model
    InspectNode n -> 
      inspectNode model n
    SelectNode (pos, node) -> 
      selectNode model node
=======
    StartPan ({x,y} as d) ->
      case model.dragState of
        DragNothing ->
          { model | dragState = MapPan
            ,panData = { svgPos = model.panData.svgPos
            ,panStart = UpdateHelpers.calculatePanPosition model d } }
        _ -> model
    DragAt ({x,y} as d) ->
      case model.dragState of
        Node sn ->
          { model | nodes = model.nodes |> List.map (\n ->
            case n.id == sn.id of
              True -> 
                UpdateHelpers.calculateNodeClickPosition model {x=d.x,y=d.y} 
                |> \{x,y} -> { n | px = x, py = y } 
              False -> n) }
        MapPan -> {model | panData = { panStart =  UpdateHelpers.calculatePanPosition model d  
           ,svgPos = UpdateHelpers.getSvgPos model d } }
        DragNothing -> model
    DragEnd _ ->
      { model | dragState = DragNothing }
    InspectNode n -> 
      { model | actionState = InspectingNode n }
    SelectNode (({x, y} as pos), node) ->
      case model.actionState of
        ConnectingNodes x ->
          case x of
            Waiting -> 
              { model | actionState = ConnectingNodes FirstSelected
                ,toolbarText = "Select the second node to create connector"
                ,connectorData = { cdata | nodeId = node.id } }
            FirstSelected -> 
              { model | actionState = ConnectingNodes SecondSelected
                ,toolbarText = "Set connector properties in property panel"
                ,connectorData = { cdata | connector = { con | nodeId = node.id } } }
            SecondSelected -> 
              { model | actionState = InspectingNode node }
        _ ->
          { model | actionState = InspectingNode node 
           ,dragState = Node node }
>>>>>>> origin/master
    CreateConnector evt ->
      case evt of
        InitConnector -> 
          initConnectorData model
        ExitChanged s ->
          updateConData model (upPDCon (updateExit s))
        EnterChanged s ->
          updateConData model (upPDCon (updateEntry s))
        CostChanged cost ->
          updateConData model (upPDCon (updateCost cost))
        FinishConnector ->
          finishConnector model
    CreateNode e ->
      case e of
        InitNode ->
          initNodeData model
        DisplayTxt s ->
          updateNodeData model (upPDNode (updateDisplayText s))
        FinishNode -> 
          finishNode model
    StartConnecting ->
      startConnecting model
    ZoomChange x ->  
      zoomChange model x

