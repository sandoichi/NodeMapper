var _user$project$Update$getOffset = F2(
	function (model, pos) {
		var _p0 = model.offSet;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return {x: pos.x, y: pos.y};
		}
	});
var _user$project$Update$calculatePosition = F2(
	function (mousePos, offSet) {
		var _p1 = offSet;
		if (_p1.ctor === 'Just') {
			var _p2 = _p1._0;
			return {x: mousePos.x - _p2.x, y: mousePos.y - _p2.y};
		} else {
			return {x: mousePos.x, y: mousePos.y};
		}
	});
var _user$project$Update$updateHelp = F2(
	function (msg, model) {
		var _p3 = msg;
		switch (_p3.ctor) {
			case 'DragAt':
				var _p8 = _p3._0;
				var _p4 = model.dragNode;
				if (_p4.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							nodes: A2(
								_elm_lang$core$List$map,
								function (n) {
									var _p5 = _elm_lang$core$Native_Utils.eq(n.id, _p4._0.id);
									if (_p5 === true) {
										return function (_p6) {
											var _p7 = _p6;
											return _elm_lang$core$Native_Utils.update(
												n,
												{px: _p7.x, py: _p7.y});
										}(
											A2(
												_user$project$Update$calculatePosition,
												{x: _p8.x, y: _p8.y},
												model.offSet));
									} else {
										return n;
									}
								},
								model.nodes),
							lastMsg: _elm_lang$core$Maybe$Just(
								_user$project$MapMsg$DragAt(
									{x: _p8.x, y: _p8.y}))
						});
				} else {
					return model;
				}
			case 'DragEnd':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						dragNode: _elm_lang$core$Maybe$Nothing,
						lastMsg: _elm_lang$core$Maybe$Just(
							_user$project$MapMsg$DragEnd(
								{x: 1, y: 1}))
					});
			case 'InspectNode':
				var _p9 = _p3._0;
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						actionState: _user$project$MapModel$InspectingNode(_p9),
						lastMsg: _elm_lang$core$Maybe$Just(
							_user$project$MapMsg$InspectNode(_p9))
					});
			case 'SelectNode':
				var _p14 = _p3._0._1;
				var _p10 = model.actionState;
				if (_p10.ctor === 'Connecting') {
					var _p11 = _p10._0;
					if (_p11.ctor === 'Waiting') {
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								actionState: _user$project$MapModel$Connecting(
									_user$project$NodeConnectors$FirstSelected(_p14))
							});
					} else {
						var _p13 = _p11._0;
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								actionState: _user$project$MapModel$InspectingNode(_p13),
								nodes: A2(
									_elm_lang$core$List$map,
									function (n) {
										var _p12 = _elm_lang$core$Native_Utils.eq(n.id, _p13.id);
										if (_p12 === true) {
											return _elm_lang$core$Native_Utils.update(
												n,
												{
													connectors: _user$project$MapNode$Connectors(
														A2(
															_elm_lang$core$List$append,
															_user$project$MapNode$unwrapConnectors(n.connectors),
															{
																ctor: '::',
																_0: {nodeId: _p14.id, cost: 5},
																_1: {ctor: '[]'}
															}))
												});
										} else {
											return n;
										}
									},
									model.nodes)
							});
					}
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							actionState: _user$project$MapModel$InspectingNode(_p14),
							offSet: _elm_lang$core$Maybe$Just(
								A2(_user$project$Update$getOffset, model, _p3._0._0)),
							dragNode: _elm_lang$core$Maybe$Just(_p14),
							lastMsg: _elm_lang$core$Maybe$Just(
								_user$project$MapMsg$SelectNode(
									{
										ctor: '_Tuple2',
										_0: {x: 1, y: 1},
										_1: _p14
									}))
						});
				}
			case 'CreateNode':
				var _p15 = model.actionState;
				if (_p15.ctor === 'CreatingNode') {
					var _p17 = _p15._0;
					var _p16 = _p3._0;
					switch (_p16.ctor) {
						case 'Init':
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									actionState: _user$project$MapModel$CreatingNode(
										_user$project$MapNode$getInit(model.nodeCounter + 1))
								});
						case 'DisplayTxt':
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									actionState: _user$project$MapModel$CreatingNode(
										_elm_lang$core$Native_Utils.update(
											_p17,
											{displayText: _p16._0}))
								});
						default:
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									nodeCounter: model.nodeCounter + 1,
									actionState: _user$project$MapModel$InspectingNode(_p17),
									nodes: A2(
										_elm_lang$core$List$append,
										model.nodes,
										{
											ctor: '::',
											_0: _p17,
											_1: {ctor: '[]'}
										})
								});
					}
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							actionState: _user$project$MapModel$CreatingNode(
								_user$project$MapNode$getInit(model.nodeCounter + 1))
						});
				}
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						actionState: _user$project$MapModel$Connecting(_user$project$NodeConnectors$Waiting)
					});
		}
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Update$updateHelp, msg, model),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
