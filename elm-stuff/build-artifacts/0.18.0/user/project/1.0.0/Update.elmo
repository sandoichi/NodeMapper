var _user$project$Update$updateHelp = F2(
	function (msg, model) {
		var nod = model.nodeData.node;
		var ndata = model.nodeData;
		var con = model.connectorData.connector;
		var cdata = model.connectorData;
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'DragAt':
				var _p5 = _p0._0;
				var _p1 = model.dragNode;
				if (_p1.ctor === 'Just') {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							nodes: A2(
								_elm_lang$core$List$map,
								function (n) {
									var _p2 = _elm_lang$core$Native_Utils.eq(n.id, _p1._0.id);
									if (_p2 === true) {
										return function (_p3) {
											var _p4 = _p3;
											return _elm_lang$core$Native_Utils.update(
												n,
												{px: _p4.x, py: _p4.y});
										}(
											A2(
												_user$project$UpdateHelpers$calculatePosition,
												{x: _p5.x, y: _p5.y},
												model.offSet));
									} else {
										return n;
									}
								},
								model.nodes)
						});
				} else {
					return model;
				}
			case 'DragEnd':
				return _elm_lang$core$Native_Utils.update(
					model,
					{dragNode: _elm_lang$core$Maybe$Nothing});
			case 'InspectNode':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						actionState: _user$project$MapModel$InspectingNode(_p0._0)
					});
			case 'SelectNode':
				var _p8 = _p0._0._1;
				var _p6 = model.actionState;
				if (_p6.ctor === 'ConnectingNodes') {
					var _p7 = _p6._0;
					switch (_p7.ctor) {
						case 'Waiting':
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									actionState: _user$project$MapModel$ConnectingNodes(_user$project$MapModel$FirstSelected),
									connectorData: _elm_lang$core$Native_Utils.update(
										cdata,
										{nodeId: _p8.id})
								});
						case 'FirstSelected':
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									actionState: _user$project$MapModel$ConnectingNodes(_user$project$MapModel$SecondSelected),
									connectorData: _elm_lang$core$Native_Utils.update(
										cdata,
										{
											connector: _elm_lang$core$Native_Utils.update(
												con,
												{nodeId: _p8.id})
										})
								});
						default:
							return _elm_lang$core$Native_Utils.update(
								model,
								{
									actionState: _user$project$MapModel$InspectingNode(_p8)
								});
					}
				} else {
					return _elm_lang$core$Native_Utils.update(
						model,
						{
							actionState: _user$project$MapModel$InspectingNode(_p8),
							offSet: _elm_lang$core$Maybe$Just(
								A2(_user$project$UpdateHelpers$getOffset, model, _p0._0._0)),
							dragNode: _elm_lang$core$Maybe$Just(_p8)
						});
				}
			case 'CreateConnector':
				var _p9 = _p0._0;
				switch (_p9.ctor) {
					case 'InitConnector':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								connectorData: _user$project$Connectors$getPanelInit(0)
							});
					case 'ExitChanged':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								connectorData: _elm_lang$core$Native_Utils.update(
									cdata,
									{
										connector: _elm_lang$core$Native_Utils.update(
											con,
											{exitSide: _p9._0})
									})
							});
					case 'EnterChanged':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								connectorData: _elm_lang$core$Native_Utils.update(
									cdata,
									{
										connector: _elm_lang$core$Native_Utils.update(
											con,
											{exitSide: _p9._0})
									})
							});
					case 'CostChanged':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								connectorData: _elm_lang$core$Native_Utils.update(
									cdata,
									{
										connector: _elm_lang$core$Native_Utils.update(
											con,
											{cost: _p9._0})
									})
							});
					default:
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								actionState: _user$project$MapModel$Idle,
								nodes: A2(
									_elm_lang$core$List$map,
									function (n) {
										var _p10 = _elm_lang$core$Native_Utils.eq(n.id, cdata.nodeId);
										if (_p10 === true) {
											return _elm_lang$core$Native_Utils.update(
												n,
												{
													connectors: {ctor: '::', _0: con, _1: n.connectors}
												});
										} else {
											return n;
										}
									},
									model.nodes)
							});
				}
			case 'CreateNode':
				var _p11 = _p0._0;
				switch (_p11.ctor) {
					case 'InitNode':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								actionState: _user$project$MapModel$CreatingNode,
								nodeData: _user$project$MapNode$getPanelInit(model.nodeCounter + 1)
							});
					case 'DisplayTxt':
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								nodeData: _elm_lang$core$Native_Utils.update(
									ndata,
									{
										node: _elm_lang$core$Native_Utils.update(
											nod,
											{displayText: _p11._0})
									})
							});
					default:
						return _elm_lang$core$Native_Utils.update(
							model,
							{
								nodeCounter: model.nodeCounter + 1,
								actionState: _user$project$MapModel$InspectingNode(nod),
								nodes: A2(
									_elm_lang$core$List$append,
									model.nodes,
									{
										ctor: '::',
										_0: nod,
										_1: {ctor: '[]'}
									})
							});
				}
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						actionState: _user$project$MapModel$ConnectingNodes(_user$project$MapModel$Waiting)
					});
		}
	});
var _user$project$Update$update = F2(
	function (msg, model) {
		return {
			ctor: '_Tuple2',
			_0: A2(_user$project$Update$updateHelp, msg, model),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
