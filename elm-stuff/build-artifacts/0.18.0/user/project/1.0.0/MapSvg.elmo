var _user$project$MapSvg$connectorsContainsId = F2(
	function (connectors, id) {
		return A2(
			_elm_lang$core$List$member,
			id,
			A2(
				_elm_lang$core$List$map,
				function (x) {
					return x.nodeId;
				},
				_user$project$MapNode$unwrapConnectors(connectors)));
	});
var _user$project$MapSvg$genConnectorGraphic = F2(
	function (start, end) {
		return A2(
			_elm_lang$svg$Svg$line,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('connectorLine'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x1(
						_elm_lang$core$Basics$toString(start.px)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y1(
							_elm_lang$core$Basics$toString(start.py)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x2(
								_elm_lang$core$Basics$toString(end.px)),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y2(
									_elm_lang$core$Basics$toString(end.py)),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			},
			{ctor: '[]'});
	});
var _user$project$MapSvg$genConnectors = F2(
	function (node, connectedNodes) {
		return A2(
			_elm_lang$core$List$map,
			function (x) {
				return A2(_user$project$MapSvg$genConnectorGraphic, node, x);
			},
			connectedNodes);
	});
var _user$project$MapSvg$genConnectorsMap = F2(
	function (node, nodes) {
		return A2(
			_user$project$MapSvg$genConnectors,
			node,
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					return A2(_user$project$MapSvg$connectorsContainsId, node.connectors, x.id);
				},
				nodes));
	});
var _user$project$MapSvg$mapConnectors = function (nodes) {
	return _elm_lang$core$List$concat(
		A2(
			_elm_lang$core$List$map,
			function (x) {
				return A2(_user$project$MapSvg$genConnectorsMap, x, nodes);
			},
			A2(
				_elm_lang$core$List$filter,
				function (x) {
					var _p0 = x.connectors;
					if (_p0._0.ctor === '[]') {
						return false;
					} else {
						return true;
					}
				},
				nodes)));
};
var _user$project$MapSvg$Regular = {ctor: 'Regular'};
var _user$project$MapSvg$SelectedSecondary = {ctor: 'SelectedSecondary'};
var _user$project$MapSvg$SelectedPrimary = {ctor: 'SelectedPrimary'};
var _user$project$MapSvg$getNodeType = F2(
	function (node, model) {
		var _p1 = model.selectedNode;
		if (_p1.ctor === 'Nothing') {
			return _user$project$MapSvg$Regular;
		} else {
			var _p2 = _elm_lang$core$Native_Utils.eq(_p1._0.id, node.id);
			if (_p2 === true) {
				return _user$project$MapSvg$SelectedPrimary;
			} else {
				return function (x) {
					var _p3 = x;
					if (_p3.ctor === 'Regular') {
						var _p4 = model.selectedNode2;
						if (_p4.ctor === 'Nothing') {
							return _user$project$MapSvg$Regular;
						} else {
							var _p5 = _elm_lang$core$Native_Utils.eq(_p4._0.id, node.id);
							if (_p5 === true) {
								return _user$project$MapSvg$SelectedSecondary;
							} else {
								return _user$project$MapSvg$Regular;
							}
						}
					} else {
						return _user$project$MapSvg$SelectedPrimary;
					}
				}(_user$project$MapSvg$Regular);
			}
		}
	});
var _user$project$MapSvg$genGraphic = F2(
	function (mapNode, model) {
		return A2(
			_elm_lang$svg$Svg$g,
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html_Events$on,
					'mousedown',
					A2(
						_elm_lang$core$Json_Decode$map,
						function (x) {
							return _user$project$MapMsg$StartDrag(
								{ctor: '_Tuple2', _0: x, _1: mapNode});
						},
						_elm_lang$mouse$Mouse$position)),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$rect,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onClick(
							_user$project$MapMsg$SelectNode(mapNode)),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$class(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'rect ',
									function () {
										var _p6 = A2(_user$project$MapSvg$getNodeType, mapNode, model);
										switch (_p6.ctor) {
											case 'SelectedPrimary':
												return 'selectedPrimary';
											case 'SelectedSecondary':
												return 'selectedSecondary';
											default:
												return '';
										}
									}())),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$rx('5'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$ry('5'),
											_1: {
												ctor: '::',
												_0: _elm_lang$svg$Svg_Attributes$x(
													_elm_lang$core$Basics$toString(mapNode.px)),
												_1: {
													ctor: '::',
													_0: _elm_lang$svg$Svg_Attributes$y(
														_elm_lang$core$Basics$toString(mapNode.py)),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$class('text'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fontSize('30'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$x(
										_elm_lang$core$Basics$toString(mapNode.px + 5)),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$y(
											_elm_lang$core$Basics$toString(mapNode.py + 40)),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(mapNode.displayText),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$MapSvg$mapNodeList = F2(
	function (nodes, model) {
		return A2(
			_elm_lang$core$List$map,
			function (x) {
				return A2(_user$project$MapSvg$genGraphic, x, model);
			},
			nodes);
	});
var _user$project$MapSvg$genSvg = F2(
	function (nodes, model) {
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$class('svg'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$append,
				A2(_user$project$MapSvg$mapNodeList, nodes, model),
				_user$project$MapSvg$mapConnectors(nodes)));
	});
